<sear:SearchOffers>
<sear:SchemaVersion>1.0</sear:SchemaVersion>
<sear:Request>
<sear:Criteria>
<sear:OfferNameNumber>kiwisaver test</sear:OfferNameNumber>
</sear:Criteria>
</sear:Request>
</sear:SearchOffers>
</soapenv:Body>
</soapenv:Envelope>'
url = "https://sandbox.api.business.govt.nz/services/v2/companies-office/disclose-register/DisclosePublic "
a = POST(
url = url,
config = config(token = auth$access_token),
content_type("text/xml;charset=UTF-8"),
body = body)
auth
auth$access_token
a = POST(
url = url,
config = config(token = auth$access_token),
content_type("text/xml;charset=UTF-8"),
body = body)
token = auth$access_token
?auth
a = POST(
url = url,
config = config(token = token),
content_type("text/xml;charset=UTF-8"),
body = body)
traceback()
paste("Bearer", token)
add_headers(
Authorization = paste("Bearer", token))
a = POST(
url = url,
config = add_headers(
Authorization = paste("Bearer", token)),
content_type("text/xml;charset=UTF-8"),
body = body)
a
http_status(a)
http_type(a)
a
content(a)
a = POST(
url = url,
config = add_headers(
Authorization = paste("Bearer", token),
SOAPAction = '"http://data.business.govt.nz/services/FMCR/DisclosePublic/DisclosePublicServicePort/SearchSchemes"'),
content_type("text/xml;charset=UTF-8"),
body = body)
http_status(a)
add_headers(
Authorization = paste("Bearer", token),
SOAPAction = '"http://data.business.govt.nz/services/FMCR/DisclosePublic/DisclosePublicServicePort/SearchSchemes"')
add_headers(
Authorization = paste("Bearer", token),
SOAPAction = '"http://data.business.govt.nz/services/FMCR/DisclosePublic/DisclosePublicServicePort/SearchSchemes"',
Content-Length = "605",
Host = "sandbox.api.business.govt.nz")
add_headers(
Authorization = paste("Bearer", token),
SOAPAction = '"http://data.business.govt.nz/services/FMCR/DisclosePublic/DisclosePublicServicePort/SearchSchemes"',
Content-Length = "605",
Host = "sandbox.api.business.govt.nz")
add_headers(
Authorization = paste("Bearer", token),
SOAPAction = '"http://data.business.govt.nz/services/FMCR/DisclosePublic/DisclosePublicServicePort/SearchSchemes"',
Content-Length = "605",
Host = "sandbox.api.business.govt.nz")
add_headers(
Authorization = paste("Bearer", token),
SOAPAction = '"http://data.business.govt.nz/services/FMCR/DisclosePublic/DisclosePublicServicePort/SearchSchemes"',
`Content-Length` = "605",
Host = "sandbox.api.business.govt.nz")
library(httr)
consumerKey = "6yYrka8ozrxGyVSw1tlUzRq_ciga"
consumerSecret = "aRqx467VE4Oe0FAam1Jbxmd9m1oa"
authUrl = "https://api.business.govt.nz/services/token"
query = list(
grant_type = "client_credentials",
validity_period = "600")
resp = POST(
url = authUrl,
config = authenticate(consumerKey, consumerSecret),
query = query)
http_type(resp)
auth = content(resp)
token = auth$access_token
auth
a = POST(
url = url,
config = add_headers(
Authorization = paste("Bearer", token),
SOAPAction = '"http://data.business.govt.nz/services/FMCR/DisclosePublic/DisclosePublicServicePort/SearchSchemes"',
`Content-Length` = "605",
Host = "sandbox.api.business.govt.nz"),
content_type("text/xml;charset=UTF-8"),
body = body)
a = POST(
url = url,
config = add_headers(
Authorization = paste("Bearer", token),
SOAPAction = '"http://data.business.govt.nz/services/FMCR/DisclosePublic/DisclosePublicServicePort/SearchSchemes"',
`Content-Length` = "605",
Host = "sandbox.api.business.govt.nz"),
content_type("text/xml;charset=UTF-8"),
body = body)
source('~/projects/R/2020-02-09-amyApi.R')
body = '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:get="http://data.business.govt.nz/services/FMCR/DisclosePublic/GetDocument">
<soapenv:Header/>
<soapenv:Body>
<get:GetDocument>
<get:SchemaVersion>1.0</get:SchemaVersion>
<get:Request>
<get:Documentkey>f886ea5c4883f4d6</get:Documentkey>
</get:Request>
</get:GetDocument>
</soapenv:Body>
</soapenv:Envelope>'
url = "https://sandbox.api.business.govt.nz/services/v2/companies-office/disclose-register/DisclosePublic"
a = POST(
url = url,
config = add_headers(
Authorization = paste("Bearer", token),
SOAPAction = '"http://data.business.govt.nz/services/FMCR/DisclosePublic/DisclosePublicServicePort/GetDocument"',
`Content-Length` = "458",
Host = "sandbox.api.business.govt.nz"),
content_type("text/xml;charset=UTF-8"),
body = body)
a = RETRY(
verb = "POST",
url = url,
config = add_headers(
Authorization = paste("Bearer", token),
SOAPAction = '"http://data.business.govt.nz/services/FMCR/DisclosePublic/DisclosePublicServicePort/GetDocument"',
`Content-Length` = "458",
Host = "sandbox.api.business.govt.nz"),
content_type("text/xml;charset=UTF-8"),
body = body)
a
a = RETRY(
verb = "POST",
url = url,
config = add_headers(
Authorization = paste("Bearer", token),
SOAPAction = '"http://data.business.govt.nz/services/FMCR/DisclosePublic/DisclosePublicServicePort/GetDocument"',
`Content-Length` = "458",
Host = "sandbox.api.business.govt.nz"),
content_type("text/xml;charset=UTF-8"),
body = body)
traceback()
body
a = POST(
url = url,
config = add_headers(
Authorization = paste("Bearer", token),
SOAPAction = '"http://data.business.govt.nz/services/FMCR/DisclosePublic/DisclosePublicServicePort/GetDocument"',
`Content-Length` = "458",
Host = "sandbox.api.business.govt.nz"),
content_type("text/xml;charset=UTF-8"),
body = body)
traceback()
source('~/projects/R/2020-02-09-amyApi.R')
a
http_status(a)
token
a = POST(
url = url,
config = add_headers(
Authorization = paste("Bearer", token),
SOAPAction = '"http://data.business.govt.nz/services/FMCR/DisclosePublic/DisclosePublicServicePort/GetDocument"',
`Content-Length` = "458",
Host = "sandbox.api.business.govt.nz"),
content_type("text/xml;charset=UTF-8"),
body = body)
install.packages(c("backports", "BH", "boot", "broom", "callr", "cli", "clipr", "curl", "DBI", "devtools", "digest", "dplyr", "ellipsis", "fansi", "forcats", "foreign", "ggplot2", "gh", "haven", "hms", "htmltools", "httr", "jsonlite", "KernSmooth", "knitr", "lattice", "markdown", "MASS", "Matrix", "mgcv", "mime", "modelr", "nlme", "nnet", "openssl", "pillar", "pkgbuild", "pkgconfig", "plyr", "prettyunits", "processx", "ps", "purrr", "R6", "Rcpp", "remotes", "rlang", "rmarkdown", "roxygen2", "rstudioapi", "rvest", "scales", "selectr", "stringi", "survival", "sys", "testthat", "tidyr", "tidyselect", "tidyverse", "tinytex", "vctrs", "whisker", "xfun", "xml2", "yaml"))
devtools::install_github("anhinton/worktimr")
photoYears = list.dirs(path = "p:/PhotoLibrary/")
photoYears
photoYears = list.dirs(path = "p:/PhotoLibrary/", recursive = FALSE)
photoYears
yearNames = basename(photoYears)
yearNames
bigDump = list.files("p:/PhotoLibrary/")
bigDump
bigDump = list.files("p:/PhotoLibrary/", recursive = TRUE)
head(bigDump)
dumpFiles = basename(bigDump)
head(bigDump)
head(dumpFiles)
grep(pattern = "[.][[:alpha:]]$", x = dumpFiles)
grep(pattern = "[.][[:alpha:]]+$", x = dumpFiles)
a = grep(pattern = "[.][[:alpha:]]+$", x = dumpFiles)
head(dumpFiles[a])
a = regexpr(pattern = "[.][[:alpha:]]+$", x = dumpFiles)
a = regexpr(pattern = "[.][[:alpha:]]+$", text = dumpFiles)
head(a)
head(dumpFiles[a, nchar(dumpFiles)])
head(dumpFiles[a:nchar(dumpFiles)])
class(a)
regex = regexpr(pattern = "[.][[:alpha:]]+$", text = dumpFiles)
head(substr(x = dumpFiles, start = regex, stop = nchar(dumpFiles)))
extension = substr(x = dumpFiles, start = regex, stop = nchar(dumpFiles))
range(nchar(extension))
extension = gsub(pattern = "^[.]", replacement = "", x = extension)
extension = unique(extension)
knitr::kable(tidyr::as_tibble(extension = extension))
knitr::kable(tidyr::tibble(extension = extension))
knitr::kable(tidyr::tibble(extension = sort(extension)))
(sort(extension))
pioResearchStrategy::udwConnect
keyring::key_set("UDW Production",
"UDW_USER")
keyring::key_get("UDW Production", "UDW_PASS")
keyring::key_set("UDW Production", "UDW_PASS")
keyring::key_get("UDW Production", "UDW_PASS")
keyring::key_get("UDW Production",
"UDW_USER")
keyring::key_set("Dimensions API", "DIMENSIONS_USERNAME")
keyring::key_set("Dimensions API", "DIMENSIONS_PASSWORD")
keyring::key_set("Scival API", "SCIVAL_API_KEY")
keyring::key_get("Scival API", "SCIVAL_API_KEY")
musicFiles = list.files(
path = "p:/MusicLibrary/",
pattern = "[.]flac$",
all.files = TRUE,
full.names = TRUE,
recursive = TRUE)
musicFiles
flacFolder = file.path("p:/FlacFiles")
dir.create(path = flacFolder)
dir.exists(flacFolder)
file.copy(from = musicFiles, to = flacFolder, recursive = TRUE)
flacFolder
musicFiles = list.files(
path = "p:/MusicLibrary/",
pattern = "[.]flac$",
all.files = TRUE,
full.names = TRUE,
recursive = TRUE)
flacFolder = file.path("p:/FlacFiles")
flacFolder
head(musicFiles)
file.path(head(musicFiles))
?basename
dirname(head(musicFiles))
musicFolders = unique(dirname(musicFolders))
musicFolders
musicFolders = unique(dirname(musicFiles))
musicFolders
flacFolder = file.path("p:/FlacFiles")
flacFolder
dir.exists(flacFolder)
if (!dir.exists(flacFolder))
dir.create(path = flacFolder)
dir.exists(flacFolder)
flacFolder = file.path("P:/Music/FlacFiles")
flacFolder
dir.exists(flacFolder)
source('~/projects/R/2020-08-17-copyFlacs.R')
file.copy(from = musicFolders, to = flacFolder, recursive = TRUE)
oggFiles = list.files(
path = "p:/MusicLibrary/",
pattern = "[.]ogg$",
all.files = TRUE,
full.names = TRUE,
recursive = TRUE)
oggFolders = unique(dirname(oggFiles))
file.copy(from = oggFolders, to = flacFolder, recursive = TRUE)
oggFolders
allFiles = list.files(
path = "p:/MusicLibrary/",
all.files = TRUE,
full.names = TRUE,
recursive = TRUE,
include.dirs = FALSE)
allFileExtensions = basename(allFiles)
head(allFiles)
allFileExtensions = basename(allFiles)
head(allFiles)
allFileExtensions.regex = grep(pattern = "[.].{3,}$", x = allFileExtensions)
allFileExtensions.regex = regexpr(pattern = "[.].{3,}$", text = allFileExtensions)
allFileExtensions.regex
allFileExtensions = regmatches(x = allFileExtensions,
m = allFileExtensions.regex)
allFileExtensions = sort(unique(allFileExtensions))
allFileExtensions.regex = regexpr(pattern = "[.][[:alnum:]]{3,}$",
text = allFileExtensions)
allFileExtensions = regmatches(x = allFileExtensions,
m = allFileExtensions.regex)
allFileExtensions = sort(unique(allFileExtensions))
allFileExtensions
allFiles = list.files(
path = "p:/MusicLibrary/",
all.files = TRUE,
full.names = TRUE,
recursive = TRUE,
include.dirs = FALSE)
allFileExtensions.regex = regexpr(pattern = "[.][[:alnum:]]{3,}$",
text = allFileExtensions)
allFileExtensions = regmatches(x = allFileExtensions,
m = allFileExtensions.regex)
(allFileExtensions = sort(unique(allFileExtensions)))
allFiles = list.files(
path = "p:/MusicLibrary/",
all.files = TRUE,
full.names = TRUE,
recursive = TRUE,
include.dirs = FALSE)
allFileExtensions.regex = regexpr(pattern = "[.][[:alnum:]]{3,}$",
text = allFileExtensions)
allFileExtensions = regmatches(x = allFileExtensions,
m = allFileExtensions.regex)
(allFileExtensions = sort(unique(allFileExtensions)))
"u/2205"
"/u2205"
"\u2205"
library(readxl)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(tidyverse)
getwd()
library(jsonlite)
uiskin.json = read_json("c:/Users/ashley/projects/libgdx/CoolSodaCan/android/assets/skin/uiskin.json")
library(readr)
uiskin.json = read_lines(file = "c:/Users/ashley/projects/libgdx/CoolSodaCan/android/assets/skin/uiskin.json")
head(uiskin.json)
uiskin.json[10:20]
grep(pattern = "^[[:space:]]+", uiskin.json)
uiskin.json[grep(pattern = "^[[:space:]]+", uiskin.json)]
uiskin.json[grep(pattern = "^[[:space:]]+[[:alpha:]]", uiskin.json)]
head(uiskin.json[grep(pattern = "^[[:space:]]+[[:alpha:]]", uiskin.json)])
gsub(pattern = "^[[:space:]]+", replacement = "  \"", uiskin.json)
gsub(pattern = "^[[:space:]]+", replacement = "  \\\"", uiskin.json)
head(gsub(pattern = "^[[:space:]]+", replacement = "  \\\"", uiskin.json))
head(gsub(pattern = "^[[:space:]]+", replacement = "  \"", uiskin.json))
head(gsub(pattern = "^[[:space:]]+", replacement = "  \"", uiskin.json))
?gsub
regexp(pattern = "^[[:space:]]+", uiskin.json)
grep(pattern = "^[[:space:]]+", uiskin.json)
uiskin.json[1]
uiskin.json[2]
grep(pattern = "^[[:space:]]+[[:alpha:]]+", uiskin.json)
uiskin.json[grep(pattern = "^[[:space:]]+[[:alpha:]]+", uiskin.json)]
uiskin.json[grep(pattern = "^[[:space:]]+[[:alpha:]]+", uiskin.json)][1:10]
uiskin.json[grep(pattern = "^[[:space:]]+([[:alpha:]]+):", uiskin.json)][1:10]
uiskin.json[grep(pattern = "^[[:space:]]+[[:alpha:]]+:", uiskin.json)][1:10]
uiskin.json[grep(pattern = "^[[:space:]]+[[:alpha:]]+\:", uiskin.json)][1:10]
uiskin.json[grep(pattern = "^[[:space:]]+[[:alpha:]]+\\:", uiskin.json)][1:10]
uiskin.json[grep(pattern = "^[[:space:]]+[[:alpha:]]+", uiskin.json)][1:10]
uiskin.json[grep(pattern = "^[[:space:]]+[[:lower:]]+", uiskin.json)][1:10]
uiskin.json[grep(pattern = "^[[:space:]]+[[:lower:]]+:", uiskin.json)][1:10]
gsub(pattern = "^[[:space:]]+([[:lower:]]+):", replacement = "DUDE\1", uiskin.json[10:20])
uiskin.json[10:20]
uiskin.json[20:30]
uiskin.json[39:49]
gsub(pattern = "^[[:space:]]+([[:lower:]]+):", replacement = "DUDE\1", uiskin.json[39:49])
gsub(pattern = "^[[:space:]]+([[:lower:]]+):", replacement = "DUDE\0", uiskin.json[39:49])
gsub(pattern = "^[[:space:]]+([[:lower:]]+):", replacement = "DUDE\0", uiskin.json[39:49])
gsub(pattern = "^[[:space:]]+([[:alpha:]]+):", replacement = "DUDE\0", uiskin.json[39:49])
gsub(pattern = "^[[:space:]]+([[:alpha:]]+):", replacement = "DUDE\1", uiskin.json[39:49], fixed = FALSE)
gsub(pattern = "^[[:space:]]+([[:alpha:]]+):", replacement = "DUDE\"\1\"", uiskin.json[39:49], fixed = FALSE)
gsub(pattern = "^[[:space:]]+([[:alpha:]]+):", replacement = "DUDE\\1", uiskin.json[39:49], fixed = FALSE)
gsub(pattern = "^[[:space:]]+([[:alpha:]]+):", replacement = "DUDE\\1:", uiskin.json[39:49], fixed = FALSE)
gsub(pattern = "^[[:space:]]+([[:alpha:]]+):", replacement = "{{{\\1}}}:", uiskin.json[39:49], fixed = FALSE)
gsub(pattern = "^[[:space:]]+([[:alpha:].]+):", replacement = "{{{\\1}}}:", uiskin.json[39:49], fixed = FALSE)
gsub(pattern = "^[[:space:]]+([[:alpha:]]+):", replacement = "{{{\\1}}}:", uiskin.json[39:49], fixed = FALSE)
gsub(pattern = "^[[:space:]]+(([[:alpha:]]|[.])+):", replacement = "{{{\\1}}}:", uiskin.json[39:49], fixed = FALSE)
gsub(pattern = "^[[:space:]]+(([[:alpha:]]|[$.])+):", replacement = "{{{\\1}}}:", uiskin.json[39:49], fixed = FALSE)
gsub(pattern = "^[[:space:]]+([^[:space:]]+):", replacement = "{{{\\1}}}:", uiskin.json[39:49], fixed = FALSE)
gsub(pattern = "^[[:space:]]+([^[:space:]]+):", replacement = "\"\\1\":", uiskin.json)
out = gsub(pattern = "^[[:space:]]+([^[:space:]]+):", replacement = "  \"\\1\":", uiskin.json)
out
write_lines(out, "c:/Users/ashley/projects/libgdx/CoolSodaCan/android/assets/skin/json.json")
out = gsub(pattern = "^[[:space:]]+([^"[:space:]]+):", replacement = "  \"\\1\":", uiskin.json)
out = gsub(pattern = "^[[:space:]]+([^\"[:space:]]+):", replacement = "  \"\\1\":", uiskin.json)
out
head(out)
write_lines(out, "c:/Users/ashley/projects/libgdx/CoolSodaCan/android/assets/skin/json.json")
grep(pattern = ": [^[:digit:]],", out)
grep(pattern = ": [^[:digit:]],$", out)
grep(pattern = ",$", out)
out[grep(pattern = ",$", out)]
out[grep(pattern = "[^[:digit]],$", out)]
out[grep(pattern = "[^[:digit:]],$", out)]
out[grep(pattern = "[^[:digit:]]+,$", out)]
out[grep(pattern = "[[:alpha:]]+,$", out)]
out[grep(pattern = ": [[:alpha:]]+,$", out)]
out[grep(pattern = ": [-[:alpha:]]+,$", out)]
out = gsub(pattern = ": ([-[:alpha:]]+),$", replacement = "\"\\1\"", uiskin.json)
out
uiskin.json = read_lines(file = "c:/Users/ashley/projects/libgdx/CoolSodaCan/android/assets/skin/uiskin.json")
out = gsub(pattern = "^[[:space:]]+([^\"[:space:]]+):", replacement = "  \"\\1\":", uiskin.json)
out = gsub(pattern = ": ([-[:alpha:]]+),$", replacement = ": \"\\1\"", uiskin.json)
write_lines(out, "c:/Users/ashley/projects/libgdx/CoolSodaCan/android/assets/skin/json.json")
source('~/.active-rstudio-document')
library(readr)
uiskin.json = read_lines(file = "c:/Users/ashley/projects/libgdx/CoolSodaCan/android/assets/skin/uiskin.json")
out = gsub(pattern = "^[[:space:]]+([^\"[:space:]]+):", replacement = "  \"\\1\":", uiskin.json)
out = gsub(pattern = ": ([-[:alpha:]]+),$", replacement = ": \"\\1\",", uiskin.json)
write_lines(out, "c:/Users/ashley/projects/libgdx/CoolSodaCan/android/assets/skin/json.json")
library(readr)
uiskin.json = read_lines(file = "c:/Users/ashley/projects/libgdx/CoolSodaCan/android/assets/skin/uiskin.json")
out = gsub(pattern = "^[[:space:]]+([^\"[:space:]]+):", replacement = "  \"\\1\":", x = uiskin.json)
out = gsub(pattern = ": ([-[:alpha:]]+),$", replacement = ": \"\\1\",", x = out)
write_lines(out, "c:/Users/ashley/projects/libgdx/CoolSodaCan/android/assets/skin/json.json")
library(readr)
uiskin.json = read_lines(file = "c:/Users/ashley/projects/libgdx/CoolSodaCan/android/assets/skin/uiskin.json")
out = gsub(pattern = "^[[:space:]]+([^\"[:space:]]+):", replacement = "  \"\\1\":", x = uiskin.json)
out = gsub(pattern = ": ([-[:alpha:]]+),?$", replacement = ": \"\\1\",", x = out)
write_lines(out, "c:/Users/ashley/projects/libgdx/CoolSodaCan/android/assets/skin/json.json")
library(readr)
uiskin.json = read_lines(file = "c:/Users/ashley/projects/libgdx/CoolSodaCan/android/assets/skin/uiskin.json")
out = gsub(pattern = "^[[:space:]]+([^\"[:space:]]+):", replacement = "  \"\\1\":", x = uiskin.json)
out = gsub(pattern = ": ([-[:alpha:]]+)(,?)$", replacement = ": \"\\1\"\\2", x = out)
write_lines(out, "c:/Users/ashley/projects/libgdx/CoolSodaCan/android/assets/skin/json.json")
library(jsonlite)
fromJSON(out)
out.json = toJSON(x = out)
uiskin.json = read_lines(
file = "c:/Users/ashley/projects/libgdx/CoolSodaCan/android/assets/skin/uiskin.json")
out = gsub(pattern = "^[[:space:]]+([^\"[:space:]]+):",
replacement = "  \"\\1\":", x = uiskin.json)
out = gsub(pattern = ": ([-[:alpha:]]+)(,?)$",
replacement = ": \"\\1\"\\2", x = out)
out = fromJSON(txt = out)
out.json = toJSON(x = out)
out.json
out = fromJSON(txt = out)
out = gsub(pattern = "^[[:space:]]+([^\"[:space:]]+):",
replacement = "  \"\\1\":", x = uiskin.json)
out = gsub(pattern = ": ([-[:alpha:]]+)(,?)$",
replacement = ": \"\\1\"\\2", x = out)
out = fromJSON(txt = out)
out.json = prettify(toJSON(x = out))
out.json
library(jsonlite)
library(readr)
uiskin.json = read_lines(
file = "c:/Users/ashley/projects/libgdx/CoolSodaCan/android/assets/skin/uiskin.json")
out = gsub(pattern = "^[[:space:]]+([^\"[:space:]]+):",
replacement = "  \"\\1\":", x = uiskin.json)
out = gsub(pattern = ": ([-[:alpha:]]+)(,?)$",
replacement = ": \"\\1\"\\2", x = out)
out = fromJSON(txt = out)
out.json = prettify(toJSON(x = out))
write_json(
x = out.json,
path = "c:/Users/ashley/projects/libgdx/CoolSodaCan/android/assets/skin/out.json")
library(jsonlite)
library(readr)
uiskin.json = read_lines(
file = "c:/Users/ashley/projects/libgdx/CoolSodaCan/android/assets/skin/uiskin.json")
out = gsub(pattern = "^[[:space:]]+([^\"[:space:]]+):",
replacement = "  \"\\1\":", x = uiskin.json)
out = gsub(pattern = ": ([-[:alpha:]]+)(,?)$",
replacement = ": \"\\1\"\\2", x = out)
out = fromJSON(txt = out)
out.json = toJSON(x = out)
write_json(
x = out.json,
path = "c:/Users/ashley/projects/libgdx/CoolSodaCan/android/assets/skin/out.json")
library(jsonlite)
library(readr)
uiskin.json = read_lines(
file = "c:/Users/ashley/projects/libgdx/CoolSodaCan/android/assets/skin/uiskin.json")
out = gsub(pattern = "^[[:space:]]+([^\"[:space:]]+):",
replacement = "  \"\\1\":", x = uiskin.json)
out = gsub(pattern = ": ([-[:alpha:]]+)(,?)$",
replacement = ": \"\\1\"\\2", x = out)
out = fromJSON(txt = out)
out.json = prettify(toJSON(x = out))
write_lines(
x = out.json,
path = "c:/Users/ashley/projects/libgdx/CoolSodaCan/android/assets/skin/out.json")
library(jsonlite)
library(readr)
uiskin.json = read_lines(
file = "c:/Users/ashley/projects/libgdx/CoolSodaCan/android/assets/skin/uiskin.json")
out = gsub(pattern = "^[[:space:]]+([^\"[:space:]]+):",
replacement = "  \"\\1\":", x = uiskin.json)
out = gsub(pattern = ": ([-[:alpha:]]+)(,?)$",
replacement = ": \"\\1\"\\2", x = out)
write_lines(
x = out,
path = "c:/Users/ashley/projects/libgdx/CoolSodaCan/android/assets/skin/out.json")
chars = "\u0000ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890\"!`?'.,;:()[]{}<>|/@\\^$€-%+=#_&~*\u0080\u0081\u0082\u0083\u0084\u0085\u0086\u0087\u0088\u0089\u008A\u008B\u008C\u008D\u008E\u008F\u0090\u0091\u0092\u0093\u0094\u0095\u0096\u0097\u0098\u0099\u009A\u009B\u009C\u009D\u009E\u009F\u00A0\u00A1\u00A2\u00A3\u00A4\u00A5\u00A6\u00A7\u00A8\u00A9\u00AA\u00AB\u00AC\u00AD\u00AE\u00AF\u00B0\u00B1\u00B2\u00B3\u00B4\u00B5\u00B6\u00B7\u00B8\u00B9\u00BA\u00BB\u00BC\u00BD\u00BE\u00BF\u00C0\u00C1\u00C2\u00C3\u00C4\u00C5\u00C6\u00C7\u00C8\u00C9\u00CA\u00CB\u00CC\u00CD\u00CE\u00CF\u00D0\u00D1\u00D2\u00D3\u00D4\u00D5\u00D6\u00D7\u00D8\u00D9\u00DA\u00DB\u00DC\u00DD\u00DE\u00DF\u00E0\u00E1\u00E2\u00E3\u00E4\u00E5\u00E6\u00E7\u00E8\u00E9\u00EA\u00EB\u00EC\u00ED\u00EE\u00EF\u00F0\u00F1\u00F2\u00F3\u00F4\u00F5\u00F6\u00F7\u00F8\u00F9\u00FA\u00FB\u00FC\u00FD\u00FE\u00FF"
chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890\"!`?'.,;:()[]{}<>|/@\\^$€-%+=#_&~*\u0080\u0081\u0082\u0083\u0084\u0085\u0086\u0087\u0088\u0089\u008A\u008B\u008C\u008D\u008E\u008F\u0090\u0091\u0092\u0093\u0094\u0095\u0096\u0097\u0098\u0099\u009A\u009B\u009C\u009D\u009E\u009F\u00A0\u00A1\u00A2\u00A3\u00A4\u00A5\u00A6\u00A7\u00A8\u00A9\u00AA\u00AB\u00AC\u00AD\u00AE\u00AF\u00B0\u00B1\u00B2\u00B3\u00B4\u00B5\u00B6\u00B7\u00B8\u00B9\u00BA\u00BB\u00BC\u00BD\u00BE\u00BF\u00C0\u00C1\u00C2\u00C3\u00C4\u00C5\u00C6\u00C7\u00C8\u00C9\u00CA\u00CB\u00CC\u00CD\u00CE\u00CF\u00D0\u00D1\u00D2\u00D3\u00D4\u00D5\u00D6\u00D7\u00D8\u00D9\u00DA\u00DB\u00DC\u00DD\u00DE\u00DF\u00E0\u00E1\u00E2\u00E3\u00E4\u00E5\u00E6\u00E7\u00E8\u00E9\u00EA\u00EB\u00EC\u00ED\u00EE\u00EF\u00F0\u00F1\u00F2\u00F3\u00F4\u00F5\u00F6\u00F7\u00F8\u00F9\u00FA\u00FB\u00FC\u00FD\u00FE\u00FF"
chars
"\u2022"
library(xml)
library(xml2)
url = "https://www.jstor.org/stable/j.ctv1hp5hqw"
html = read_html(x = url)
View(html)
links = xml_find_all(x = html, xpath = "//a")
View(links)
hrefs = xml_attrs(x = links, attr = "href")
hrefs = xml_attr(x = links, attr = "href")
head(hrefs)
hrefs.pdf = grep(pattern = "[.]pdf$", x = hrefs)
hrefs.pdf = hrefs[grep(pattern = "[.]pdf$", x = hrefs)]
hrefs.pdf
httr::modify_url(url, path = hrefs.pdf)
httr::modify_url("https://www.jstor.org/", path = hrefs.pdf[1])
setwd("~/projects/assets/WatchedClock/appIcons")
source('~/projects/assets/WatchedClock/appIcons/desktopIcons.R')
source('~/projects/assets/WatchedClock/appIcons/iosIcons.R')
source('~/projects/assets/WatchedClock/appIcons/iosIcons.R')
